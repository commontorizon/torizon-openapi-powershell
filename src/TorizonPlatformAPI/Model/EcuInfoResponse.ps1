#
# Torizon OTA
#  This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  
# Version: 2.0-Beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER HardwareId
No description available.
.PARAMETER Primary
No description available.
.PARAMETER Id
No description available.
.PARAMETER Image
No description available.
.OUTPUTS

EcuInfoResponse<PSCustomObject>
#>

function Initialize-TorizonPlatformAPIEcuInfoResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HardwareId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Primary},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Image}
    )

    Process {
        'Creating PSCustomObject: TorizonPlatformAPI => TorizonPlatformAPIEcuInfoResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $HardwareId) {
            throw "invalid value for 'HardwareId', 'HardwareId' cannot be null."
        }

        if ($null -eq $Primary) {
            throw "invalid value for 'Primary', 'Primary' cannot be null."
        }

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Image) {
            throw "invalid value for 'Image', 'Image' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "hardwareId" = ${HardwareId}
            "primary" = ${Primary}
            "id" = ${Id}
            "image" = ${Image}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EcuInfoResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to EcuInfoResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EcuInfoResponse<PSCustomObject>
#>
function ConvertFrom-TorizonPlatformAPIJsonToEcuInfoResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: TorizonPlatformAPI => TorizonPlatformAPIEcuInfoResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TorizonPlatformAPIEcuInfoResponse
        $AllProperties = ("hardwareId", "primary", "id", "image")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'hardwareId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hardwareId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'hardwareId' missing."
        } else {
            $HardwareId = $JsonParameters.PSobject.Properties["hardwareId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primary"))) {
            throw "Error! JSON cannot be serialized due to the required property 'primary' missing."
        } else {
            $Primary = $JsonParameters.PSobject.Properties["primary"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "image"))) {
            throw "Error! JSON cannot be serialized due to the required property 'image' missing."
        } else {
            $Image = $JsonParameters.PSobject.Properties["image"].value
        }

        $PSO = [PSCustomObject]@{
            "hardwareId" = ${HardwareId}
            "primary" = ${Primary}
            "id" = ${Id}
            "image" = ${Image}
        }

        return $PSO
    }

}

