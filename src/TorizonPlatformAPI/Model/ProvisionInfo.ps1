#
# Torizon OTA
#  This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  
# Version: 2.0-Beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER StandardDeviceLimit
No description available.
.PARAMETER AutoProvUrl
No description available.
.PARAMETER Token
No description available.
.PARAMETER ProvisionedDevices
No description available.
.PARAMETER GatewayUrl
No description available.
.OUTPUTS

ProvisionInfo<PSCustomObject>
#>

function Initialize-TorizonPlatformAPIProvisionInfo {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${StandardDeviceLimit},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AutoProvUrl},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Token},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ProvisionedDevices},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GatewayUrl}
    )

    Process {
        'Creating PSCustomObject: TorizonPlatformAPI => TorizonPlatformAPIProvisionInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $StandardDeviceLimit) {
            throw "invalid value for 'StandardDeviceLimit', 'StandardDeviceLimit' cannot be null."
        }

        if ($null -eq $AutoProvUrl) {
            throw "invalid value for 'AutoProvUrl', 'AutoProvUrl' cannot be null."
        }

        if ($null -eq $Token) {
            throw "invalid value for 'Token', 'Token' cannot be null."
        }

        if ($null -eq $ProvisionedDevices) {
            throw "invalid value for 'ProvisionedDevices', 'ProvisionedDevices' cannot be null."
        }

        if ($null -eq $GatewayUrl) {
            throw "invalid value for 'GatewayUrl', 'GatewayUrl' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "standardDeviceLimit" = ${StandardDeviceLimit}
            "autoProvUrl" = ${AutoProvUrl}
            "token" = ${Token}
            "provisionedDevices" = ${ProvisionedDevices}
            "gatewayUrl" = ${GatewayUrl}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProvisionInfo<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProvisionInfo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProvisionInfo<PSCustomObject>
#>
function ConvertFrom-TorizonPlatformAPIJsonToProvisionInfo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: TorizonPlatformAPI => TorizonPlatformAPIProvisionInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TorizonPlatformAPIProvisionInfo
        $AllProperties = ("standardDeviceLimit", "autoProvUrl", "token", "provisionedDevices", "gatewayUrl")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'standardDeviceLimit' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "standardDeviceLimit"))) {
            throw "Error! JSON cannot be serialized due to the required property 'standardDeviceLimit' missing."
        } else {
            $StandardDeviceLimit = $JsonParameters.PSobject.Properties["standardDeviceLimit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoProvUrl"))) {
            throw "Error! JSON cannot be serialized due to the required property 'autoProvUrl' missing."
        } else {
            $AutoProvUrl = $JsonParameters.PSobject.Properties["autoProvUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token"))) {
            throw "Error! JSON cannot be serialized due to the required property 'token' missing."
        } else {
            $Token = $JsonParameters.PSobject.Properties["token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provisionedDevices"))) {
            throw "Error! JSON cannot be serialized due to the required property 'provisionedDevices' missing."
        } else {
            $ProvisionedDevices = $JsonParameters.PSobject.Properties["provisionedDevices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gatewayUrl"))) {
            throw "Error! JSON cannot be serialized due to the required property 'gatewayUrl' missing."
        } else {
            $GatewayUrl = $JsonParameters.PSobject.Properties["gatewayUrl"].value
        }

        $PSO = [PSCustomObject]@{
            "standardDeviceLimit" = ${StandardDeviceLimit}
            "autoProvUrl" = ${AutoProvUrl}
            "token" = ${Token}
            "provisionedDevices" = ${ProvisionedDevices}
            "gatewayUrl" = ${GatewayUrl}
        }

        return $PSO
    }

}

